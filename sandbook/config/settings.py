"""
Django settings for sandbook project.

Generated by 'django-admin startproject' using Django 3.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os

from django.urls import reverse_lazy
from django.utils.translation import ugettext_lazy as _

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
from general.core.settings import sys_settings

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'ocz8s2gzj8a&z%ioozmsqa03qia9@(9j2_$n^(d7#j^!ptg65m'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'base.apps.BaseConfig',
    'portal.apps.PortalConfig'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.template.context_processors.media',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'

SESSION_COOKIE_NAME = 'sandbook_session'


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'ATOMIC_REQUESTS': True,
        'NAME': sys_settings.MariaDB.name,
        'USER': sys_settings.MariaDB.user,
        'PASSWORD': sys_settings.MariaDB.password,
        'HOST': sys_settings.MariaDB.host,
        'PORT': sys_settings.MariaDB.port,
        'OPTIONS': {"init_command": "SET storage_engine=INNODB"},
        'TEST': {
            'NAME': 'test_%s' % sys_settings.MariaDB.name,
            'CHARSET': 'utf8',
            'COLLATION': 'utf8_general_ci',
        }

    },
}


# Caches

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache',
        'LOCATION': sys_settings.Memcached.hosts,
        # "OPTIONS": {}
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

LOGIN_REDIRECT_URL = reverse_lazy('portal:index')

LOGOUT_REDIRECT_URL = reverse_lazy('portal:account_login')

LOGIN_URL = LOGOUT_REDIRECT_URL

AUTH_USER_MODEL = 'base.User'


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

LANGUAGES = (
    ('zh-hans', _('Simplified Chinese')),
    ('en-us', _('English (USA)')),
)
LOCALE_PATHS = (
    os.path.join(BASE_DIR, "locale"),
)

LANGUAGE_COOKIE_NAME = 'language_code'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = '/static/'

STATIC_ROOT = os.path.join(BASE_DIR, 'static')

MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

MEDIA_URL = '/media/'


# Logging

# if Settings.System.log_dir and Settings.System.log_dir.startswith('/'):
#     log_dir = Settings.System.log_dir
# else:
log_dir = os.path.join(BASE_DIR, 'logs')
if not os.path.exists(log_dir):
    os.makedirs(log_dir)

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} %(filename)s {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
        'standard': {
            'format': '{levelname} {asctime} {module} %(filename)s {message}'
        },
    },
    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'handlers': {
        'console': {
            'level': 'INFO',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
        'portal': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(log_dir, 'portal.log'),
            'maxBytes': 1024 * 1024 * 100,
            # 'backupCount': 5,
            'formatter': 'standard',
        },
        'portal_error': {
            'level': 'ERROR',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(log_dir, 'portal_error.log'),
            'maxBytes': 1024 * 1024 * 100,
            # 'backupCount': 5,
            'formatter': 'standard',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'propagate': True,
        },
        'portal': {
            'handlers': ['portal', 'portal_error'],
            'level': 'DEBUG',
            'propagate': False
        },
    }
}


# Celery

CELERY_BROKER_URL = sys_settings.Celery.broker_url
CELERY_ACCEPT_CONTENT = ['json']
# CELERY_RESULT_BACKEND = sys_settings.Celery.result_backend
CELERY_TASK_SERIALIZER = 'json'
CELERY_TIMEZONE = 'Asia/Shanghai'
CELERY_TASK_RESULT_EXPIRES = 3600
CELERY_ENABLE_UTC = True
CELERYD_FORCE_EXECV = True
CELERYD_TASK_TIME_LIMIT = 10 * 60


# Email

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# EMAIL_USE_TLS = True
EMAIL_HOST = sys_settings.Email.host
EMAIL_PORT = sys_settings.Email.port
EMAIL_HOST_USER = sys_settings.Email.user
EMAIL_HOST_PASSWORD = sys_settings.Email.password
DEFAULT_FROM_EMAIL = '沙之书 <sandbookadmin@163.com>'
SERVER_EMAIL = EMAIL_HOST_USER
